import ValidatorBase, { ValidBaseInterface, Chain } from './validatorbase';
export interface Item {
    value: any;
    callback?: (faults: string[]) => void;
    rule?: ValidChain;
    require?: boolean;
    english?: boolean;
    qq?: boolean;
    age?: boolean;
    zipcode?: boolean;
    ip?: boolean;
    port?: boolean;
    bizcode?: boolean;
    invoice?: boolean;
    bankcard?: boolean;
    currency?: boolean;
    float?: boolean;
    int?: boolean;
    decimal?: boolean;
    chinese?: boolean;
    mail?: boolean;
    url?: boolean;
    account?: boolean;
    password?: boolean;
    safe?: boolean;
    dbc?: boolean;
    hex?: boolean;
    color?: boolean;
    ascii?: boolean;
    base64?: boolean;
    md5?: boolean;
    uuid?: boolean;
    mobile?: boolean;
    telphone?: boolean;
    phone?: boolean;
    percent?: boolean;
    year?: boolean;
    month?: boolean;
    day?: boolean;
    hour?: boolean;
    minute?: boolean;
    second?: boolean;
    time?: boolean;
    date?: boolean;
    datetime?: boolean;
    file?: boolean;
    image?: boolean;
    word?: boolean;
    lon?: boolean;
    lat?: boolean;
    approval?: boolean;
    citycode?: boolean;
    address?: boolean;
    upper?: boolean;
    lower?: boolean;
    even?: boolean;
    odd?: boolean;
    ipv6?: boolean;
    bodycard?: boolean;
    autocard?: boolean;
    not?: string | number | Date;
    eq?: string | number | Date;
    gt?: string | number | Date;
    gte?: string | number | Date;
    lt?: string | number | Date;
    lte?: string | number | Date;
    between?: string | number | Date;
    min?: (string | number | Date)[];
    max?: (string | number | Date)[];
    len?: string | number;
    in?: string | number;
    minlength?: string | number;
    maxlength?: string | number;
    [key: string]: any;
}
export interface ValidChain extends Chain {
    require?: ValidChain;
    english?: ValidChain;
    qq?: ValidChain;
    age?: ValidChain;
    zipcode?: ValidChain;
    ip?: ValidChain;
    port?: ValidChain;
    bizcode?: ValidChain;
    invoice?: ValidChain;
    bankcard?: ValidChain;
    currency?: ValidChain;
    float?: ValidChain;
    int?: ValidChain;
    decimal?: ValidChain;
    chinese?: ValidChain;
    mail?: ValidChain;
    url?: ValidChain;
    account?: ValidChain;
    password?: ValidChain;
    safe?: ValidChain;
    dbc?: ValidChain;
    hex?: ValidChain;
    color?: ValidChain;
    ascii?: ValidChain;
    base64?: ValidChain;
    md5?: ValidChain;
    uuid?: ValidChain;
    mobile?: ValidChain;
    telphone?: ValidChain;
    phone?: ValidChain;
    percent?: ValidChain;
    year?: ValidChain;
    month?: ValidChain;
    day?: ValidChain;
    hour?: ValidChain;
    minute?: ValidChain;
    second?: ValidChain;
    time?: ValidChain;
    date?: ValidChain;
    datetime?: ValidChain;
    file?: ValidChain;
    image?: ValidChain;
    word?: ValidChain;
    lon?: ValidChain;
    lat?: ValidChain;
    approval?: ValidChain;
    citycode?: ValidChain;
    address?: ValidChain;
    upper?: ValidChain;
    lower?: ValidChain;
    even?: ValidChain;
    odd?: ValidChain;
    ipv6?: ValidChain;
    bodycard?: ValidChain;
    autocard?: ValidChain;
    not?: (arg: string | number | Date) => ValidChain;
    eq?: (arg: string | number | Date) => ValidChain;
    gt?: (arg: string | number | Date) => ValidChain;
    gte?: (arg: string | number | Date) => ValidChain;
    lt?: (arg: string | number | Date) => ValidChain;
    lte?: (arg: string | number | Date) => ValidChain;
    between?: (arg: string | number | Date) => ValidChain;
    min?: (args: (string | number | Date)[]) => ValidChain;
    max?: (args: (string | number | Date)[]) => ValidChain;
    len?: (arg: string | number) => ValidChain;
    in?: (arg: string | number) => ValidChain;
    minlength?: (arg: string | number) => ValidChain;
    maxlength?: (arg: string | number) => ValidChain;
}
export interface ValidatorInterface extends ValidBaseInterface {
    readonly type: ValidChain;
    check(value: any, rn?: string, ...args: any[]): boolean;
    checkItem(options: Item): boolean;
    checkItems(items: Item[]): boolean;
}
export default class Validator extends ValidatorBase implements ValidatorInterface {
    check(value: any, rn?: string, ...args: any[]): boolean;
    checkItem(options: Item): boolean;
    checkItems(items: Item[]): boolean;
    constructor();
}
