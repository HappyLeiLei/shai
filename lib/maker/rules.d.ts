export interface RuleFunction {
    (...values: any[]): boolean | string | number;
}
export declare type baseRuleName = 'md5' | 'uuid' | 'now' | 'regexp' | 'enum' | 'alpha' | 'rgb' | 'hsl' | 'int' | 'number' | 'bool' | 'month' | 'day' | 'minute' | 'validcode' | 'mid' | 'upper' | 'lower' | 'account' | 'password' | 'color' | 'url' | 'mail' | 'mobile' | 'port' | 'bizcode' | 'bankcard' | 'qq' | 'english' | 'chinese' | 'ip' | 'text' | 'price' | 'enName' | 'enMaleName' | 'enFemaleName' | 'surname' | 'cnName' | 'cnMaleName' | 'cnFemaleName' | 'enState' | 'cnState' | 'company' | 'address';
export interface RulesInterface {
    [key: string]: RegExp | RuleFunction;
    md5(arg?: string, arg2?: boolean): string;
    uuid(arg?: string): string;
    now(arg?: string): string;
    regexp(arg?: string | RegExp): string;
    enum<T extends boolean | string | number>(...args: T[]): T;
    int(arg1?: number, arg2?: number): number;
    number(arg1?: number, arg2?: number, arg3?: number): number;
    bool(): boolean;
    month(): number;
    day(): number;
    minute(): number;
    alpha(): number;
    rgb(arg?: boolean): string;
    hsl(arg?: boolean): string;
    validcode(arg?: number): string;
    mid: RegExp;
    account: RegExp;
    password: RegExp;
    color: RegExp;
    url: RegExp;
    mail: RegExp;
    mobile: RegExp;
    port: RegExp;
    bizcode: RegExp;
    bankcard: RegExp;
    qq: RegExp;
    english(num?: number, arg?: string): string;
    upper(arg?: string): string;
    lower(arg?: string): string;
    chinese(num?: number, arg?: string): string;
    ip(local?: boolean): string;
    text(arg?: string, n1?: number, n2?: number): string;
    price(arg1?: number, arg2?: number, arg3?: boolean): string;
    enName(): string;
    enMaleName(): string;
    enFemaleName(): string;
    surname(): string;
    cnName(): string;
    cnMaleName(): string;
    cnFemaleName(): string;
    enState(): string;
    cnState(): string;
    company(): string;
    address(): string;
}
export declare const rules: RulesInterface;
